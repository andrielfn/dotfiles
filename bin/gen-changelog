#!/bin/zsh

# Color definitions
RED=$'\e[0;31m'
GREEN=$'\e[0;32m'
YELLOW=$'\e[0;33m'
BLUE=$'\e[0;34m'
MAGENTA=$'\e[0;35m'
CYAN=$'\e[0;36m'
NC=$'\e[0m' # No Color

# Function to get staged changes
get_staged_changes() {
  local diff=$(git diff --staged)
  echo "$diff"
}

# Main script
echo "${CYAN}=== AI-Assisted Changelog Generator (Staged Changes) ===${NC}"

# Get staged changes
diff=$(get_staged_changes)

if [[ -z "$diff" ]]; then
  echo "${RED}Error: No staged changes found.${NC}"
  echo "Please stage your changes using 'git add' before running this script."
  exit 1
fi

echo "${BLUE}Processing staged changes...${NC}"

# Simple category selection
echo "${CYAN}Select category for this changelog entry:${NC}"
echo "1) ${GREEN}Enhancements${NC}"
echo "2) ${RED}Bug fixes${NC}"
echo "3) ${YELLOW}Deprecations${NC}"
echo "4) ${BLUE}Other/Custom${NC}"
echo

echo -n "Enter your choice (1-4): "
read choice

case $choice in
1) category="Enhancements" ;;
2) category="Bug fixes" ;;
3) category="Deprecations" ;;
4)
  echo -n "Enter custom category: "
  read custom_category
  category="$custom_category"
  ;;
*)
  echo "${RED}Invalid choice. Defaulting to 'Changes'.${NC}"
  category="Changes"
  ;;
esac

# Prompt for AI guidance
echo
echo "${CYAN}Enter guidance for the AI (what to focus on, highlight, or include in the changelog):${NC}"
echo "${YELLOW}(Press Enter to skip)${NC}"
echo -n "> "

# Read the first line to check if it's empty
read first_line

ai_guidance=""
if [[ -n "$first_line" ]]; then
  # Add the first line
  ai_guidance="$first_line"$'\n'

  # Read additional lines until empty line
  echo "${YELLOW}Continue entering guidance (press Enter when done):${NC}"
  while IFS= read -r line; do
    [[ -z "$line" ]] && break
    ai_guidance+="$line"$'\n'
  done

  echo
  echo "${GREEN}AI guidance added.${NC}"
fi

echo "${BLUE}Generating changelog entry for category: ${category}...${NC}"

# Check for existing CHANGELOG.md file
changelog_context=""
if [[ -f "CHANGELOG.md" ]]; then
  echo "${BLUE}Found existing CHANGELOG.md - using as context...${NC}"
  changelog_context=$(cat CHANGELOG.md)
fi

# Prepare prompt for Claude
prompt="You are a technical writer creating changelog entries for a commercial software library.

Review the provided git diff carefully and generate a concise, technical changelog entry that focuses on what library users need to know.

Guidelines for the changelog entry:
1. Focus ONLY on changes that affect library users (API changes, new features, behavior changes, etc.)
2. Omit internal implementation details that don't affect users (refactoring, test updates, internal code structure)
3. Be specific about what was changed and include technical details when relevant (function names, parameters, etc.)
4. Format should be suitable for a technical changelog aimed at developers using the library
5. Use complete sentences with proper punctuation
6. Keep the entry concise but informative
7. Include code snippets in backticks if they help clarify the change
8. Explain the benefit or impact of the change when relevant

The entry will be categorized under: $category
Tailor your response to be appropriate for this category.

Reply with ONLY the changelog entry text (without bullet point), without any additional text, quotes, or comments.

Git diff:
\`\`\`
$diff
\`\`\`"

# Add changelog context if available
if [[ -n "$changelog_context" ]]; then
  prompt+="

For context, here is the existing CHANGELOG.md file. Use this as inspiration for the writing style, format, and level of detail that has been used historically in this project:

\`\`\`
$changelog_context
\`\`\`"
fi

# Add AI guidance if provided
if [[ -n "$ai_guidance" ]]; then
  prompt+="

Specific guidance from the developer on what to focus on:
$ai_guidance"
fi

# Call Claude API
payload=$(jq -n \
  --arg model "claude-3-5-sonnet-20240620" \
  --arg prompt "$prompt" \
  '{model: $model, max_tokens: 1024, messages: [{role: "user", content: $prompt}]}')

response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
  -H "Content-Type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d "$payload")

entry=$(echo "$response" | jq -r '.content[0].text // empty' 2>/dev/null)

if [[ -z "$entry" ]]; then
  echo "${RED}Error: Failed to generate changelog entry${NC}"
  exit 1
fi

echo "${GREEN}Generated changelog entry:${NC}"
echo "${MAGENTA}• ${entry}${NC}"
echo

# Copy to clipboard (macOS)
echo "• ${entry}" | pbcopy
echo "${YELLOW}Entry copied to clipboard.${NC}"

# Ask if user wants to regenerate
echo
echo "${CYAN}Options: [Enter] Continue | [r] Regenerate entry | [e] Edit entry${NC}"
echo -n "> "
read -k 1 key
echo

if [[ "$key" == "r" || "$key" == "R" ]]; then
  echo "${YELLOW}Regenerating entry...${NC}"

  # Call Claude API again
  response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
    -H "Content-Type: application/json" \
    -H "x-api-key: $ANTHROPIC_API_KEY" \
    -H "anthropic-version: 2023-06-01" \
    -d "$payload")

  entry=$(echo "$response" | jq -r '.content[0].text // empty' 2>/dev/null)

  if [[ -z "$entry" ]]; then
    echo "${RED}Error: Failed to regenerate changelog entry${NC}"
    exit 1
  fi

  echo "${GREEN}Regenerated changelog entry:${NC}"
  echo "${MAGENTA}• ${entry}${NC}"
  echo

  # Copy regenerated entry to clipboard
  echo "• ${entry}" | pbcopy
  echo "${YELLOW}Entry copied to clipboard.${NC}"
elif [[ "$key" == "e" || "$key" == "E" ]]; then
  echo "${YELLOW}Edit the entry (press Enter twice when done):${NC}"
  echo "${MAGENTA}• ${entry}${NC}"
  echo

  edited_entry=""
  # Read multiline input until empty line
  while IFS= read -r line; do
    [[ -z "$line" ]] && break
    edited_entry+="$line"$'\n'
  done

  # Remove trailing newline
  edited_entry=${edited_entry%$'\n'}

  if [[ -n "$edited_entry" ]]; then
    entry="$edited_entry"
    echo
    echo "${GREEN}Updated changelog entry:${NC}"
    echo "${MAGENTA}• ${entry}${NC}"
    echo

    # Copy edited entry to clipboard
    echo "• ${entry}" | pbcopy
    echo "${YELLOW}Entry copied to clipboard.${NC}"
  else
    echo "${YELLOW}No changes made.${NC}"
  fi
fi

echo
echo "${GREEN}Done!${NC}"
