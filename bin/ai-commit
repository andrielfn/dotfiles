#!/bin/zsh

#!/bin/bash
aichat "Please suggest 5 commit messages, given the following diff:

\`\`\`diff
$(git --no-pager diff --no-color --no-ext-diff --cached)
\`\`\`

**Criteria:**

1. **Format:** Each commit message should be:
   - A clear, descriptive message
   - Written in imperative mood (e.g., 'add' not 'added')
   - Maximum 100 characters
   - Focus on the most significant change if there are multiple
   - Start with an uppercase letter
   - Avoid mentioning module names unless directly relevant

**Recent Commits on Repo for Reference:**

\`\`\`
$(git log -n 10 --pretty=format:'%h %s')
\`\`\`

**Output Template**

Follow this output template and ONLY output raw commit messages without
numbers or other decorations. Separate each commit message with \`---\`.

Implement user authentication system
---
Prevent duplicate form submissions
---
Extract validation logic to separate module
---
Improve code formatting and remove unused imports
---
Add integration tests for auth flow

**Instructions:**

- Take a moment to understand the changes made in the diff.

- Think about the impact of these changes on the project (e.g., bug fixes, new
features, performance improvements, code refactoring, documentation updates).
Abstract the changes to a higher level rather than just describing the code changes.

- Generate commit messages that accurately describe these changes, ensuring they
are helpful to someone reading the project's history.

- Remember, a well-crafted commit message can significantly aid in the maintenance
and understanding of the project over time.

- Push yourself to synthesize to a higher level - it's better to be ambitious with
some commits since only one needs to be good.

Write your commit messages below in the format shown in Output Template section above." |
  tee /tmp/aichat_output.log |
  grep -v '^$' |       # Remove empty lines
  sed -n '/^[A-Z]/p' | # Only keep lines starting with capital letters
  fzf --border --ansi \
    --preview 'echo {}' \
    --preview-window=up:wrap --print0 |
  while IFS= read -r -d '' selected; do
    COMMIT_MSG_FILE=$(mktemp)
    printf "%s" "$selected" | head -n1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' >"$COMMIT_MSG_FILE"
    echo "Committing with message: $(cat $COMMIT_MSG_FILE)"
    git commit -F "$COMMIT_MSG_FILE"
    rm -f "$COMMIT_MSG_FILE"
  done
