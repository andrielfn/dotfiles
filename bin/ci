#!/bin/zsh

# Parse flags
VERBOSE=false
DRY_RUN=false
[[ "$*" == *"--verbose"* ]] && VERBOSE=true
[[ "$*" == *"--dry"* ]] && DRY_RUN=true

# Color definitions
RED=$'\e[0;31m'
GREEN=$'\e[0;32m'
YELLOW=$'\e[0;33m'
BLUE=$'\e[0;34m'
MAGENTA=$'\e[0;35m'
CYAN=$'\e[0;36m'
NC=$'\e[0m' # No Color

# Function to get git changes (both diff and summary)
get_git_changes() {
  local type="$1"
  case "$type" in
    "diff") git diff --cached ;;
    "summary") git diff --cached --name-status | tr '\t' ' ' | sed 's/  */ /g' ;;
  esac
}

# Function to generate 3 commit message options using Claude
generate_commit_messages() {
  local diff="$1"
  local changes="$2"

  local prompt="You are an expert software engineer tasked with writing clear, concise, and informative git commit messages.

Review the provided git diff carefully and generate exactly 3 different commit message options based on the changes.

Guidelines for each commit message:
- Focus on WHAT the change accomplishes for users/functionality, not HOW it's implemented
- Describe the core business logic or feature change, not technical implementation details
- Use the imperative mood in the description (e.g., 'Add user authentication' not 'added auth flags')
- Each message MUST start with an uppercase letter
- Each message MUST be a single line, no longer than 100 characters (strictly enforced)
- Vary the level of detail and focus between the 3 options
- Avoid mentioning internal variable names, function names, or implementation specifics

Reply with EXACTLY 3 commit messages separated by ' ||| ' (three pipe characters), with no additional text, quotes, comments, or numbering. Each message must be under 100 characters. Example format: 'message1 ||| message2 ||| message3'"

  # Use jq to properly create JSON payload
  local payload=$(jq -n \
    --arg model "claude-3-5-haiku-20241022" \
    --arg prompt "$prompt" \
    --arg changes "$changes" \
    --arg diff "$diff" \
    '{
      model: $model,
      max_tokens: 1024,
      messages: [
        {
          role: "user",
          content: ($prompt + "\n\nFile changes:\n" + $changes + "\n\nDiff content:\n" + $diff)
        }
      ]
    }')

  local response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
    -H "Content-Type: application/json" \
    -H "x-api-key: $ANTHROPIC_API_KEY" \
    -H "anthropic-version: 2023-06-01" \
    -d "$payload")

  # Extract content from API response
  local result=$(echo "$response" | jq -r '.content[0].text // "Error: Failed to generate commit messages"')

  [[ "$VERBOSE" == "true" ]] && {
    echo "${YELLOW}[DEBUG] API response:${NC} $response" >&2
    echo "${YELLOW}[DEBUG] Extracted (${#result} chars):${NC} $result" >&2
  }

  echo "$result"
}

# Function to check message format
check_message_format() {
  local header=$(echo "$1" | head -n1)
  local lines=$(echo "$1" | wc -l)
  [[ ${#header} -gt 100 ]] && echo "${YELLOW}Warning: Commit header is longer than 100 characters (${#header} chars).${NC}"
  [[ $lines -gt 1 ]] && echo "${YELLOW}Warning: Commit message should be single line (found $lines lines).${NC}"
}

if [[ -z "$(get_git_changes diff)" ]]; then
  echo "${RED}No staged changes found. Please stage your changes before running this script.${NC}"
  exit 1
fi

commit_messages=$(generate_commit_messages "$(get_git_changes diff)" "$(get_git_changes summary)")

# Check if we got a response and clean it
if [[ -z "$commit_messages" ]]; then
  echo "${RED}Error: Failed to generate commit messages.${NC}"
  exit 1
fi

# Clean and parse the commit messages
cleaned_messages=$(echo "$commit_messages" | sed 's/\\n/\n/g; s/\\r//g; s/^[[:space:]]*//; s/[[:space:]]*$//; s/\\[[:alpha:]]//g')
messages=("${(@s/ ||| /)cleaned_messages}")

[[ "$VERBOSE" == "true" ]] && {
  echo "${YELLOW}[DEBUG] Raw:${NC} '$commit_messages'" >&2
  echo "${YELLOW}[DEBUG] Cleaned:${NC} '$cleaned_messages'" >&2
  echo "${YELLOW}[DEBUG] Array (${#messages[@]}):${NC}" >&2
  for i in {1..${#messages[@]}}; do
    echo "  $i: '${messages[$i]}'" >&2
  done
}

# Ensure we have exactly 3 messages and they're under 100 chars
if [[ ${#messages[@]} -ne 3 ]]; then
  echo "${RED}Error: Expected 3 commit messages, got ${#messages[@]}.${NC}"
  exit 1
fi

# Check if any message is too long or doesn't start with uppercase
for i in {1..3}; do
  if [[ ${#messages[$i]} -gt 100 ]]; then
    echo "${RED}Error: Message $i is too long (${#messages[$i]} chars): ${messages[$i]}${NC}"
    echo "${YELLOW}Please try running the script again for shorter messages.${NC}"
    exit 1
  fi
  
  first_char="${messages[$i]:0:1}"
  if [[ ! "$first_char" =~ [A-Z] ]]; then
    echo "${RED}Error: Message $i must start with uppercase letter: ${messages[$i]}${NC}"
    echo "${YELLOW}Please try running the script again.${NC}"
    exit 1
  fi
done

echo "\n${GREEN}Choose a commit message:${NC}\n${MAGENTA}------------------------${NC}"
for i in {1..3}; do
  echo "${CYAN}$i)${NC} ${messages[$i]}"
done
echo "${MAGENTA}------------------------${NC}"

if [[ "$DRY_RUN" == "true" ]]; then
  echo "\n${YELLOW}[DRY RUN] Would show interactive selection. Using message 1 for demo.${NC}"
  selected_message="${messages[1]}"
else
  echo "${CYAN}Options: [1-3] Select message | [Esc] Cancel${NC}"
  while true; do
    read -k 1 -s key
    case $key in
    1)
      selected_message="${messages[1]}"
      break
      ;;
    2)
      selected_message="${messages[2]}"
      break
      ;;
    3)
      selected_message="${messages[3]}"
      break
      ;;
    $'\e') # Esc key
      echo "\n${YELLOW}Cancelled.${NC}"
      exit 0
      ;;
    *)
      echo "\n${YELLOW}Invalid option. Please press 1, 2, 3, or Esc.${NC}"
      ;;
    esac
  done
fi

echo "\n${GREEN}Selected message:${NC} $selected_message"
check_message_format "$selected_message"

if [[ "$DRY_RUN" == "true" ]]; then
  echo "\n${YELLOW}[DRY RUN] Would commit with message: $selected_message${NC}"
  echo "${YELLOW}[DRY RUN] Skipping actual git commit${NC}"
  exit 0
fi

if git commit -m "$selected_message"; then
  echo "\n${GREEN}Committed successfully.${NC}"
  exit 0
else
  echo "\n${RED}Failed to commit. Please check your Git configuration.${NC}"
  exit 1
fi
